"""
Analytics Admin Classes and Dashboard

This module contains analytics-specific admin classes and dashboard functionality
extracted from sites.py for better organization.
"""

from django.contrib import admin
from django.contrib.admin import AdminSite
from django.utils import timezone
from django.template.response import TemplateResponse
from django.db.models import Sum
from decimal import Decimal
from ..models import User, Account, Deposit, Transaction, AccountDailyBalance, DepositDailyBalance
from .mixins import ReadOnlyMixin, AnalyticsMixin, AnalyticsActionMixin
from .inlines import AccountTxnOutInline, AccountTxnInInline, DepositTxnInInline


# Analytics Admin Classes
class AnalyticsUserAdmin(AnalyticsMixin, ReadOnlyMixin, admin.ModelAdmin):
    """Analytics user admin with enhanced display and inlines"""
    list_display = ('id', 'username', 'email', 'is_active', 'date_joined', 'account_count', 'transaction_count')
    search_fields = ('username', 'email')
    readonly_fields = ('username', 'email', 'first_name', 'last_name', 'is_active', 'is_staff', 'is_superuser', 'date_joined', 'last_login')
    list_filter = ('is_active', 'is_staff', 'date_joined')
    actions = ['export_user_data']
    
    def account_count(self, obj):
        """Display number of accounts for user"""
        return obj.accounts.count()
    account_count.short_description = 'تعداد حساب‌ها'
    
    def transaction_count(self, obj):
        """Display number of transactions for user"""
        return obj.transactions.count()
    transaction_count.short_description = 'تعداد تراکنش‌ها'


class AnalyticsAccountAdmin(AnalyticsMixin, ReadOnlyMixin, admin.ModelAdmin):
    """Analytics account admin with enhanced display and profit calculation fields"""
    list_display = ('id', 'user', 'name', 'account_type', 'balance', 'monthly_profit_rate', 'last_profit_accrual_at', 'get_snapshot_count', 'transaction_count', 'profit_earned')
    list_filter = ('account_type', 'monthly_profit_rate')
    search_fields = ('user__username', 'name')
    inlines = [AccountTxnOutInline, AccountTxnInInline]
    readonly_fields = ('user', 'name', 'account_type', 'balance', 'initial_balance', 'monthly_profit_rate', 'last_profit_accrual_at', 'created_at', 'updated_at')
    actions = ['calculate_profit_summary', 'export_account_data']
    
    def transaction_count(self, obj):
        """Display number of transactions for account"""
        return obj.incoming_account_transactions.count() + obj.outgoing_account_transactions.count()
    transaction_count.short_description = 'تعداد تراکنش‌ها'
    
    def profit_earned(self, obj):
        """Display total profit earned"""
        profit_txns = obj.incoming_account_transactions.filter(
            kind__in=[Transaction.KIND_PROFIT_ACCOUNT, Transaction.KIND_PROFIT_DEPOSIT_TO_ACCOUNT]
        )
        total_profit = sum(txn.amount for txn in profit_txns)
        return f"{total_profit:,.2f}"
    profit_earned.short_description = 'سود کسب شده'


class AnalyticsDepositAdmin(AnalyticsMixin, ReadOnlyMixin, admin.ModelAdmin):
    """Analytics deposit admin with enhanced display"""
    list_display = ('id', 'user', 'initial_balance', 'monthly_profit_rate', 'last_profit_accrual_at', 'get_snapshot_count', 'profit_generated', 'transaction_count')
    search_fields = ('user__username',)
    list_filter = ('monthly_profit_rate', 'created_at')
    inlines = [DepositTxnInInline]
    readonly_fields = ('user', 'initial_balance', 'monthly_profit_rate', 'last_profit_accrual_at', 'created_at', 'updated_at')
    actions = ['calculate_deposit_summary', 'export_deposit_data']
    
    def profit_generated(self, obj):
        """Display total profit generated by deposit"""
        profit_txns = obj.incoming_deposit_transactions.filter(
            kind=Transaction.KIND_PROFIT_DEPOSIT_TO_ACCOUNT
        )
        total_profit = sum(txn.amount for txn in profit_txns)
        return f"{total_profit:,.2f}"
    profit_generated.short_description = 'سود تولید شده'
    
    def transaction_count(self, obj):
        """Display number of transactions for deposit"""
        return obj.incoming_deposit_transactions.count()
    transaction_count.short_description = 'تعداد تراکنش‌ها'


class AnalyticsTransactionAdmin(AnalyticsMixin, ReadOnlyMixin, admin.ModelAdmin):
    """Analytics transaction admin with enhanced display"""
    list_display = ('transaction_code', 'id', 'user', 'kind', 'amount', 'exchange_rate', 'applied', 'scheduled_for', 'created_at', 'profit_type', 'cross_currency')
    list_filter = ('kind', 'applied', 'scheduled_for', 'created_at')
    search_fields = ('user__username',)
    date_hierarchy = 'created_at'
    readonly_fields = ('user', 'source_account', 'destination_account', 'destination_deposit', 'amount', 'kind', 'exchange_rate', 'applied', 'issued_at', 'scheduled_for', 'created_at')
    actions = ['calculate_transaction_summary', 'export_transaction_data']
    
    def profit_type(self, obj):
        """Display if transaction is profit-related"""
        if obj.kind in [Transaction.KIND_PROFIT_ACCOUNT, Transaction.KIND_PROFIT_DEPOSIT_TO_ACCOUNT]:
            return "سود"
        return "عادی"
    profit_type.short_description = 'نوع تراکنش'
    
    def cross_currency(self, obj):
        """Display if transaction is cross-currency"""
        if obj.source_account and obj.destination_account:
            return obj.source_account.account_type != obj.destination_account.account_type
        return False
    cross_currency.short_description = 'ارز متقابل'
    cross_currency.boolean = True


class AnalyticsAccountDailyBalanceAdmin(AnalyticsMixin, ReadOnlyMixin, admin.ModelAdmin):
    """Analytics account daily balance admin with enhanced display"""
    list_display = ('id', 'get_account_name', 'get_account_type', 'get_owner', 'snapshot_date', 'balance', 'snapshot_number', 'balance_change', 'trend')
    list_filter = ('snapshot_date', 'account__account_type')
    search_fields = ('account__user__username', 'account__name')
    readonly_fields = ('account', 'snapshot_date', 'balance')
    actions = ['calculate_balance_trend', 'export_balance_data']
    
    def get_owner(self, obj):
        try:
            return obj.account.user
        except Exception:
            return '-'
    get_owner.short_description = 'مالک'

    def get_account_type(self, obj):
        try:
            return obj.account.get_account_type_display()
        except Exception:
            return '-'
    get_account_type.short_description = 'نوع حساب'

    def get_account_name(self, obj):
        try:
            return obj.account.name
        except Exception:
            return '-'
    get_account_name.short_description = 'نام حساب'
    
    def balance_change(self, obj):
        """Display balance change from previous day"""
        # This would need to be implemented with proper logic
        return "N/A"
    balance_change.short_description = 'تغییر موجودی'
    
    def trend(self, obj):
        """Display balance trend"""
        # This would need to be implemented with proper logic
        return "N/A"
    trend.short_description = 'روند'


class AnalyticsDepositDailyBalanceAdmin(AnalyticsMixin, ReadOnlyMixin, admin.ModelAdmin):
    """Analytics deposit daily balance admin with enhanced display"""
    list_display = ('id', 'get_deposit_name', 'get_owner', 'get_owner_short', 'get_deposit_kind', 'get_persian_snapshot_date', 'balance', 'snapshot_number')
    list_filter = ('snapshot_date',)
    search_fields = ('deposit__user__username',)
    readonly_fields = ('deposit', 'snapshot_date', 'balance')

    def get_owner(self, obj):
        try:
            return obj.deposit.user
        except Exception:
            return '-'
    get_owner.short_description = 'مالک'

    def get_deposit_kind(self, obj):
        try:
            return obj.deposit.get_profit_kind_display()
        except Exception:
            return '-'
    get_deposit_kind.short_description = 'نوع سپرده'

    def get_deposit_name(self, obj):
        try:
            return obj.deposit.user.username if not hasattr(obj.deposit, 'name') else obj.deposit.name
        except Exception:
            return '-'
    get_deposit_name.short_description = 'نام سپرده'

    def get_owner_short(self, obj):
        try:
            return obj.deposit.user.short_user_id
        except Exception:
            return '-'
    get_owner_short.short_description = 'مالک (کوتاه)'


# Analytics Dashboard Functions
def _build_analytics_context(request):
    """Build context for analytics dashboard"""
    from ..models import Account, Deposit, Transaction
    from decimal import Decimal
    today = timezone.localdate()
    tomorrow = today + timezone.timedelta(days=1)

    # Account totals by type (sum of current balances)
    def sum_accounts_by_type(acc_type):
        total = Decimal('0')
        for acc in Account.objects.filter(account_type=acc_type):
            total += Decimal(acc.balance)
        return total

    totals = {
        'usd_accounts_total': sum_accounts_by_type(Account.ACCOUNT_TYPE_USD),
        'eur_accounts_total': sum_accounts_by_type(Account.ACCOUNT_TYPE_EUR),
        'gbp_accounts_total': sum_accounts_by_type(Account.ACCOUNT_TYPE_GBP),
        'gold_accounts_total': sum_accounts_by_type(Account.ACCOUNT_TYPE_GOLD),
        'rial_accounts_total': sum_accounts_by_type(Account.ACCOUNT_TYPE_RIAL),
    }

    # Rial deposits total (sum of deposit balances)
    dep_total = Decimal('0')
    for d in Deposit.objects.all():
        dep_total += Decimal(d.balance)
    totals['rial_deposits_total'] = dep_total

    # Profit due tomorrow: deposits whose next profit date == tomorrow
    # Using deposit logic: based on profit_kind windows
    def next_profit_date(deposit):
        if deposit.profit_kind == deposit.PROFIT_KIND_MONTHLY:
            days = 30
        elif deposit.profit_kind == deposit.PROFIT_KIND_SEMIANNUAL:
            days = 180
        else:
            days = 365
        base = deposit.last_profit_accrual_at or deposit.created_at
        if not base:
            return None
        return (base + timezone.timedelta(days=days)).date()

    profit_due_tomorrow = 0
    for d in Deposit.objects.all():
        nd = next_profit_date(d)
        if nd == tomorrow:
            # Approximation: show computed period profit preview as 0 (expensive to compute live)
            profit_due_tomorrow += 0
    totals['profit_due_tomorrow'] = profit_due_tomorrow

    # Profit transferred today: sum of applied profit transactions created today
    profit_today = Transaction.objects.filter(
        kind__in=[Transaction.KIND_PROFIT_ACCOUNT, Transaction.KIND_PROFIT_DEPOSIT_TO_ACCOUNT],
        applied=True,
        created_at__date=today,
    ).aggregate(total_amount=Sum('amount'))['total_amount'] or Decimal('0')
    totals['profit_transferred_today'] = profit_today

    # Credit increase today/yesterday
    credit_today = Transaction.objects.filter(
        kind=Transaction.KIND_CREDIT_INCREASE,
        applied=True,
        created_at__date=today,
    ).aggregate(total_amount=Sum('amount'))['total_amount'] or Decimal('0')
    credit_yesterday = Transaction.objects.filter(
        kind=Transaction.KIND_CREDIT_INCREASE,
        applied=True,
        created_at__date=today - timezone.timedelta(days=1),
    ).aggregate(total_amount=Sum('amount'))['total_amount'] or Decimal('0')
    totals['credit_increase_today'] = credit_today
    totals['credit_increase_yesterday'] = credit_yesterday

    context = {
        'totals': totals,
        'title': 'داشبورد تحلیل',
        'site_header': 'تحلیل و گزارش‌گیری (فقط خواندن)',
    }
    return context


def analytics_dashboard(request):
    """Analytics dashboard view"""
    context = _build_analytics_context(request)
    context.update({'request': request, 'has_permission': True})
    return TemplateResponse(request, 'admin/analytics_dashboard.html', context)


# Analytics Admin Site
class AnalyticsAdminSite(AdminSite):
    """Analytics admin site with dashboard"""
    site_header = "تحلیل و گزارش‌گیری (فقط خواندن)"
    site_title = "مدیریت تحلیل"
    index_title = "تحلیل و گزارش‌گیری مالی"
    site_url = "/admin/analytics/"

    def index(self, request, extra_context=None):
        """Override index to show analytics dashboard"""
        context = _build_analytics_context(request)
        context.update(self.each_context(request))
        if extra_context:
            context.update(extra_context)
        return TemplateResponse(request, 'admin/analytics_dashboard.html', context)


# Create analytics admin site
analytics_admin_site = AnalyticsAdminSite(name='analytics_admin')

# Register Analytics Admin
analytics_admin_site.register(User, AnalyticsUserAdmin)
analytics_admin_site.register(Account, AnalyticsAccountAdmin)
analytics_admin_site.register(Deposit, AnalyticsDepositAdmin)
analytics_admin_site.register(Transaction, AnalyticsTransactionAdmin)
analytics_admin_site.register(AccountDailyBalance, AnalyticsAccountDailyBalanceAdmin)
analytics_admin_site.register(DepositDailyBalance, AnalyticsDepositDailyBalanceAdmin)


